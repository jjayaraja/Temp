# Reset SharePoint Online Document Library Permissions to Inherit from Parent
# This script resets permissions for ALL files and folders in the entire library that have broken inheritance

# Parameters - UPDATE THESE VALUES
$SiteUrl = "https://yourtenant.sharepoint.com/sites/yoursite"
$LibraryName = "Documents"  # Change to your document library name

# Connect to SharePoint Online
try {
    Connect-PnPOnline -Url $SiteUrl -Interactive
    Write-Host "Connected to SharePoint site: $SiteUrl" -ForegroundColor Green
}
catch {
    Write-Error "Failed to connect to SharePoint: $($_.Exception.Message)"
    exit
}

# Function to reset permissions for a specific item
function Reset-ItemPermissions {
    param(
        [Parameter(Mandatory = $true)]
        [Microsoft.SharePoint.Client.ListItem]$Item,
        [Parameter(Mandatory = $true)]
        [string]$ItemType
    )
    
    try {
        # Check if item has unique permissions (broken inheritance)
        if ($Item.HasUniqueRoleAssignments) {
            Write-Host "Resetting permissions for $ItemType`: $($Item["FileLeafRef"])" -ForegroundColor Yellow
            
            # Reset role inheritance - this will remove unique permissions and inherit from parent
            $Item.ResetRoleInheritance()
            $Item.Context.ExecuteQuery()
            
            Write-Host "âœ“ Successfully reset permissions for $ItemType`: $($Item["FileLeafRef"])" -ForegroundColor Green
            return $true
        }
        else {
            return $false
        }
    }
    catch {
        Write-Error "Failed to reset permissions for $ItemType $($Item["FileLeafRef"]): $($_.Exception.Message)"
        return $false
    }
}

# Function to process folders recursively
function Process-Folder {
    param(
        [Parameter(Mandatory = $true)]
        [string]$FolderPath,
        [Parameter(Mandatory = $false)]
        [int]$Level = 0
    )
    
    $indent = "  " * $Level
    Write-Host "$indent Processing folder: $FolderPath" -ForegroundColor Cyan
    
    try {
        # Get folder items
        $folderItems = Get-PnPListItem -List $LibraryName -FolderServerRelativeUrl $FolderPath
        
        $resetCount = 0
        
        foreach ($item in $folderItems) {
            $fileType = $item["FSObjType"]
            
            if ($fileType -eq 1) {
                # It's a folder
                $folderName = $item["FileLeafRef"]
                $subFolderPath = "$FolderPath/$folderName"
                
                # Reset folder permissions
                if (Reset-ItemPermissions -Item $item -ItemType "Folder") {
                    $resetCount++
                }
                
                # Process subfolder recursively
                $subResetCount = Process-Folder -FolderPath $subFolderPath -Level ($Level + 1)
                $resetCount += $subResetCount
            }
            else {
                # It's a file
                if (Reset-ItemPermissions -Item $item -ItemType "File") {
                    $resetCount++
                }
            }
        }
        
        return $resetCount
    }
    catch {
        Write-Error "$indent Failed to process folder $FolderPath`: $($_.Exception.Message)"
        return 0
    }
}

# Main execution
try {
    Write-Host "`n=== Starting Permission Reset for Entire Library ===" -ForegroundColor Magenta
    Write-Host "Site: $SiteUrl" -ForegroundColor White  
    Write-Host "Library: $LibraryName" -ForegroundColor White
    Write-Host "====================================================`n" -ForegroundColor Magenta
    
    # Get the document library
    $library = Get-PnPList -Identity $LibraryName
    if (-not $library) {
        throw "Document library '$LibraryName' not found"
    }
    
    # Get library root folder server relative URL
    $libraryRootPath = $library.RootFolder.ServerRelativeUrl
    
    $startTime = Get-Date
    
    # Start processing from root folder - this processes the ENTIRE library
    $totalResetCount = Process-Folder -FolderPath $libraryRootPath
    
    $endTime = Get-Date
    $duration = $endTime - $startTime
    
    Write-Host "`n=== Permission Reset Complete ===" -ForegroundColor Magenta
    Write-Host "Total items with permissions reset: $totalResetCount" -ForegroundColor Green
    Write-Host "Processing time: $($duration.ToString('mm\:ss'))" -ForegroundColor White
    Write-Host "All items now inherit permissions from the library" -ForegroundColor Green
    Write-Host "=================================" -ForegroundColor Magenta
}
catch {
    Write-Error "Script execution failed: $($_.Exception.Message)"
}
finally {
    # Disconnect from SharePoint
    Disconnect-PnPOnline
    Write-Host "`nDisconnected from SharePoint" -ForegroundColor Yellow
}

Write-Host "`n--- Process Complete ---" -ForegroundColor Blue
Write-Host "The entire '$LibraryName' library has been processed" -ForegroundColor Blue
Write-Host "All files and folders now inherit permissions from the library level" -ForegroundColor Blue
