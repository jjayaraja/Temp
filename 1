<#
.SYNOPSIS
Migrates Confluence content to SharePoint Modern Pages with full asset preservation

.REQUIREMENTS
- PnP.PowerShell Module
- SharePoint Site Owner Privileges
- PowerShell 7.0+
#>

# Parameters
$siteUrl = "https://contoso.sharepoint.com/sites/yoursite"
$zipFilePath = "C:\ConfluenceExport.zip"
$tempFolder = "C:\ConfluenceExport"
$imagesLibrary = "SiteAssets/ConfluenceImages"
$stylesLibrary = "SiteAssets/ConfluenceStyles"
$pageLibrary = "SitePages"
$logFile = "MigrationErrors.log"

# Initialize
$ErrorActionPreference = "Stop"
$DebugPreference = "SilentlyContinue"
$startTime = Get-Date

# Connect to SharePoint
try {
    Connect-PnPOnline -Url $siteUrl -Interactive -ErrorAction Stop
    Write-Host "Connected to SharePoint site: $siteUrl" -ForegroundColor Green
}
catch {
    Write-Host "Connection failed: $_" -ForegroundColor Red
    exit
}

# Extract ZIP Archive
try {
    if (-not (Test-Path $tempFolder)) { New-Item -Path $tempFolder -ItemType Directory -Force }
    Expand-Archive -Path $zipFilePath -DestinationPath $tempFolder -Force
    Write-Host "ZIP archive extracted to: $tempFolder" -ForegroundColor Cyan
}
catch {
    Write-Host "Extraction failed: $_" -ForegroundColor Red
    exit
}

# Create Asset Folders
try {
    Resolve-PnPFolder -SiteRelativePath $imagesLibrary | Out-Null
    Resolve-PnPFolder -SiteRelativePath $stylesLibrary | Out-Null
    Write-Host "Created asset libraries" -ForegroundColor Cyan
}
catch {
    Write-Host "Folder creation failed: $_" -ForegroundColor Red
    exit
}

# Asset Upload Functions
function Upload-Assets {
    param(
        [string]$LocalPath,
        [string]$TargetLibrary
    )
    
    Get-ChildItem $LocalPath -Recurse | ForEach-Object {
        try {
            $targetPath = $_.FullName.Replace($LocalPath, $TargetLibrary)
            Add-PnPFile -Path $_.FullName -Folder $targetPath -ErrorAction Stop | Out-Null
            Write-Host "Uploaded: $($_.Name)" -ForegroundColor DarkCyan
        }
        catch {
            Write-Warning "Failed to upload $($_.Name): $_"
        }
    }
}

# Upload Images and Styles
Upload-Assets -LocalPath (Join-Path $tempFolder "images") -TargetLibrary $imagesLibrary
Upload-Assets -LocalPath (Join-Path $tempFolder "styles") -TargetLibrary $stylesLibrary

# Page Creation Functions
function Add-PageSection {
    param(
        [string]$PageName,
        [int]$Retries = 5,
        [int]$Delay = 5
    )
    
    $attempt = 0
    while ($attempt -lt $Retries) {
        try {
            $page = Get-PnPPage -Identity $PageName -ErrorAction Stop
            
            # Try standard section addition
            $section = Add-PnPPageSection -Page $PageName -SectionTemplate OneColumn -Order 1 -ErrorAction Stop
            
            # Fallback method if needed
            if (-not $section) {
                $page.Sections.AddSection([PnP.Core.Model.Pages.CanvasSectionTemplate]::OneColumn) | Out-Null
                $page.Save()
                $page.Publish()
            }
            
            return $true
        }
        catch {
            Write-Warning "Section attempt $($attempt+1)/$Retries failed: $_"
            $attempt++
            Start-Sleep -Seconds $Delay
        }
    }
    return $false
}

# Process HTML Files
$htmlFiles = Get-ChildItem -Path $tempFolder -Filter *.html -Recurse

foreach ($htmlFile in $htmlFiles) {
    $pageNameBase = [IO.Path]::GetFileNameWithoutExtension($htmlFile.Name)
    
    # Sanitize page name
    $pageName = $pageNameBase -replace '[^\w\s-]', '' -replace '\s+', ' ' -trim
    $pageName = $pageName.Substring(0, [Math]::Min($pageName.Length, 50))
    
    try {
        # Remove existing page
        if (Get-PnPPage -Identity $pageName -ErrorAction SilentlyContinue) {
            Remove-PnPPage -Identity $pageName -Force
            Write-Host "Removed existing page: $pageName" -ForegroundColor Yellow
            
            # Verify deletion
            $retryCount = 0
            while (Get-PnPPage -Identity $pageName -ErrorAction SilentlyContinue) {
                if ($retryCount++ -ge 5) { throw "Page deletion failed" }
                Start-Sleep -Seconds 5
            }
        }

        # Create new page
        $page = Add-PnPPage -Name $pageName -Title $pageName -LayoutType Article -ErrorAction Stop
        Write-Host "Created page: $pageName" -ForegroundColor Green

        # Add section with retries
        if (-not (Add-PageSection -PageName $pageName)) {
            throw "Section creation failed"
        }

        # Prepare HTML content
        $htmlContent = Get-Content $htmlFile.FullName -Raw
        
        # Update resource paths
        $htmlContent = $htmlContent -replace '(src|href)="(images|styles)/', "$1=""$siteUrl/$TargetLibrary/$2/"
        
        # SharePoint HTML wrapper
        $webPartHtml = @"
<div class="CanvasComponent">
    <div class="CanvasZone">
        <div class="CanvasSection">
            <div class="ControlZone">
                $htmlContent
            </div>
        </div>
    </div>
</div>
"@

        # Add web part
        Add-PnPPageWebPart -Page $pageName -Component "Text" `
            -Section 1 -Column 1 -WebPartProperties @{ innerHtml = $webPartHtml } | Out-Null
        
        # Publish page
        Set-PnPPage -Identity $pageName -Publish | Out-Null
        Write-Host "Published: $pageName" -ForegroundColor Green
        
        Start-Sleep -Seconds 3
    }
    catch {
        $errorDetails = @{
            Timestamp = Get-Date
            Page      = $pageName
            Error     = $_.Exception.Message
            Stack     = $_.ScriptStackTrace
        }
        $errorDetails | ConvertTo-Json | Out-File $logFile -Append
        Write-Warning "Error processing $pageName : $_"
    }
}

# Build Navigation
try {
    $pages = Get-PnPPage -Folder $pageLibrary | Where-Object { $_.Title }
    
    # Clear existing navigation
    Get-PnPNavigationNode -Location QuickLaunch | Remove-PnPNavigationNode -Force
    
    # Add new nodes
    $pages | ForEach-Object {
        Add-PnPNavigationNode -Title $_.Title -Url $_.ServerRelativeUrl -Location QuickLaunch
    }
    Write-Host "Navigation updated successfully" -ForegroundColor Green
}
catch {
    Write-Warning "Navigation setup failed: $_"
}

# Cleanup
Remove-Item -Path $tempFolder -Recurse -Force
Write-Host "Migration completed in $((Get-Date) - $startTime)" -ForegroundColor Green
