# Parameters (modify these as needed)
$SiteUrl   = "https://abc.com/sites/abc"    # SharePoint Online site URL
$LocalRoot = "C:\ConfluenceExport"          # Root folder of the Confluence HTML export

# Import PnP.PowerShell module (make sure it's installed)
# Import-Module PnP.PowerShell   # (uncomment if needed)

# Define the functions

function Connect-ToSharePoint {
    [CmdletBinding()]
    param([string]$SiteUrl)
    try {
        Write-Host "Connecting to $SiteUrl ..." -ForegroundColor Cyan
        Connect-PnPOnline -Url $SiteUrl -Interactive
        Write-Host "Successfully connected to $SiteUrl." -ForegroundColor Green
    } catch {
        Write-Host "ERROR: Failed to connect to $SiteUrl. $_" -ForegroundColor Red
        throw
    }
}

function Upload-FolderToSiteAssets {
    [CmdletBinding()]
    param([string]$LocalFolder, [string]$TargetFolder)
    if (-not (Test-Path $LocalFolder)) {
        Write-Host "Skipping upload: Local folder '$LocalFolder' not found." -ForegroundColor Yellow
        return
    }
    Write-Host "Uploading contents of '$LocalFolder' to SiteAssets/$TargetFolder ..." -ForegroundColor Cyan
    $files = Get-ChildItem -Path $LocalFolder -Recurse -File
    foreach ($file in $files) {
        $relativePath = $file.FullName.Substring($LocalFolder.Length) -replace '^[\\/]', ''
        $targetFolderPath = "SiteAssets/$TargetFolder"
        if ($relativePath -and $relativePath -ne $file.Name) {
            $subDir = Split-Path $relativePath -Parent
            $targetFolderPath += "/$subDir"
        }
        try {
            Add-PnPFile -Path $file.FullName -Folder $targetFolderPath
            Write-Host "Uploaded '$($file.Name)' to '$targetFolderPath'."
        } catch {
            Write-Host "ERROR: Failed to upload '$($file.FullName)'. $_" -ForegroundColor Red
        }
    }
}

function Rewrite-LinksInHtml {
    [CmdletBinding()]
    param([string]$HtmlContent)
    $HtmlContent = $HtmlContent -replace 'images/', '/sites/abc/SiteAssets/images/'
    $HtmlContent = $HtmlContent -replace 'styles/', '/sites/abc/SiteAssets/styles/'
    $HtmlContent = $HtmlContent -replace 'attachments/', '/sites/abc/SiteAssets/attachments/'
    return $HtmlContent
}

function CreateOrUpdate-ModernPage {
    [CmdletBinding()]
    param([string]$PageName, [string]$HtmlContent)
    $pageFileName = "$PageName.aspx"
    $pageUrl = "/sites/abc/SitePages/$pageFileName"
    $pageExists = $false
    try {
        $null = Get-PnPPage -Identity $PageName -ErrorAction Stop
        $pageExists = $true
    } catch {
        $pageExists = $false
    }
    if ($pageExists) {
        Write-Host "Updating existing page: $PageName" -ForegroundColor Cyan
        try {
            Set-PnPFileCheckedIn -Url $pageUrl -CheckInType OverwriteCheckIn -Comment "Discarding old draft"
        } catch { }
        $components = Get-PnPPageComponent -Page $PageName
        foreach ($comp in $components) {
            try {
                Remove-PnPPageComponent -Page $PageName -InstanceId $($comp.InstanceId) -Force
            } catch {
                Write-Host "Warning: Failed to remove a component from $PageName. $_" -ForegroundColor Yellow
            }
        }
        try {
            Add-PnPPageTextPart -Page $PageName -Text $HtmlContent
            Write-Host "Replaced content on page '$PageName'." -ForegroundColor Green
        } catch {
            Write-Host "ERROR: Failed to add content to page '$PageName'. $_" -ForegroundColor Red
            return
        }
    }
    else {
        Write-Host "Creating new page: $PageName" -ForegroundColor Cyan
        try {
            Add-PnPPage -Name $PageName -LayoutType Article
            Write-Host "Created page '$PageName'." -ForegroundColor Green
        } catch {
            Write-Host "ERROR: Failed to create page '$PageName'. $_" -ForegroundColor Red
            return
        }
        try {
            Add-PnPPageTextPart -Page $PageName -Text $HtmlContent
            Write-Host "Added content to new page '$PageName'." -ForegroundColor Green
        } catch {
            Write-Host "ERROR: Failed to add content to page '$PageName'. $_" -ForegroundColor Red
            return
        }
    }
    try {
        Set-PnPFileCheckedIn -Url $pageUrl -CheckInType MajorCheckIn -Comment "Publish page"
        Write-Host "Published page '$PageName'." -ForegroundColor Green
    } catch {
        Write-Host "ERROR: Failed to publish page '$PageName'. $_" -ForegroundColor Red
    }
}

# Main script execution
Connect-ToSharePoint -SiteUrl $SiteUrl

# Upload asset folders (if they exist in the local export)
Upload-FolderToSiteAssets -LocalFolder (Join-Path $LocalRoot "images") -TargetFolder "images"
Upload-FolderToSiteAssets -LocalFolder (Join-Path $LocalRoot "styles") -TargetFolder "styles"
Upload-FolderToSiteAssets -LocalFolder (Join-Path $LocalRoot "attachments") -TargetFolder "attachments"

# Process each HTML file in the root of the export (and subfolders, if any)
$htmlFiles = Get-ChildItem -Path $LocalRoot -Recurse -Filter "*.html" -File
foreach ($file in $htmlFiles) {
    # Use file name (without extension) as page name
    $pageName = [System.IO.Path]::GetFileNameWithoutExtension($file.Name)
    Write-Host "Processing page: $pageName (from file $($file.Name))" -ForegroundColor Cyan
    # Read HTML content
    $htmlContent = Get-Content $file.FullName -Raw
    # Rewrite links to SharePoint URLs
    $htmlContent = Rewrite-LinksInHtml -HtmlContent $htmlContent
    # Create or update the SharePoint modern page
    CreateOrUpdate-ModernPage -PageName $pageName -HtmlContent $htmlContent
}
