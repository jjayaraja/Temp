# SharePoint Online Permission Reset Script
# Single, reliable method using advanced CAML queries

# Configuration
$siteUrl = "https://yourtenant.sharepoint.com/sites/yoursite"
$libraryName = "Documents"

# Connect to SharePoint Online
try {
    Connect-PnPOnline -Url $siteUrl -Interactive
    Write-Host "‚úì Connected to SharePoint site: $siteUrl" -ForegroundColor Green
} catch {
    Write-Error "Failed to connect to SharePoint: $_"
    exit 1
}

Write-Host "`n=== SharePoint Permission Reset Started ===" -ForegroundColor Cyan
$startTime = Get-Date

# Get all items with unique permissions using optimized CAML query
Write-Host "Scanning for items with unique permissions..." -ForegroundColor Yellow

$camlQuery = @"
<View Scope='RecursiveAll'>
    <Query>
        <Where>
            <Eq>
                <FieldRef Name='HasUniqueRoleAssignments'/>
                <Value Type='Boolean'>1</Value>
            </Eq>
        </Where>
        <OrderBy>
            <FieldRef Name='FSObjType' Ascending='FALSE'/>
            <FieldRef Name='FileDirRef' Ascending='TRUE'/>
        </OrderBy>
    </Query>
</View>
"@

try {
    $itemsToReset = Get-PnPListItem -List $libraryName -Query $camlQuery -PageSize 2000
    
    if ($itemsToReset.Count -eq 0) {
        Write-Host "No items with unique permissions found." -ForegroundColor Yellow
        Disconnect-PnPOnline
        exit 0
    }
    
    Write-Host "Found $($itemsToReset.Count) items with unique permissions" -ForegroundColor Cyan
    
    # Process items (folders first due to ordering, then files)
    $resetCount = 0
    $errorCount = 0
    
    foreach ($item in $itemsToReset) {
        $itemType = if ($item.FileSystemObjectType -eq "File") { "File" } else { "Folder" }
        $itemPath = $item.FieldValues["FileRef"]
        
        try {
            Write-Host "[$($resetCount + 1)/$($itemsToReset.Count)] Resetting $itemType`: " -NoNewline -ForegroundColor Gray
            Write-Host "$itemPath" -ForegroundColor White
            
            # Reset permissions to inherit from parent
            Set-PnPListItemPermission -List $libraryName -Identity $item.Id -InheritPermissions
            
            $resetCount++
            Write-Host "  ‚úì Success" -ForegroundColor Green
            
        } catch {
            $errorCount++
            Write-Host "  ‚úó Failed: $($_.Exception.Message)" -ForegroundColor Red
            
            # Log detailed error for troubleshooting
            $errorDetails = @{
                ItemId = $item.Id
                ItemPath = $itemPath
                ItemType = $itemType
                Error = $_.Exception.Message
                Timestamp = Get-Date
            }
            
            # Optionally write to error log file
            # $errorDetails | ConvertTo-Json | Add-Content -Path ".\SharePointResetErrors.log"
        }
        
        # Small delay to avoid throttling
        if (($resetCount + $errorCount) % 50 -eq 0) {
            Start-Sleep -Milliseconds 100
        }
    }
    
} catch {
    Write-Error "Failed to retrieve items: $_"
    Disconnect-PnPOnline
    exit 1
}

# Summary
$endTime = Get-Date
$duration = $endTime - $startTime

Write-Host "`n=== Reset Complete ===" -ForegroundColor Cyan
Write-Host "Total items processed: $($itemsToReset.Count)" -ForegroundColor White
Write-Host "Successfully reset: $resetCount" -ForegroundColor Green
Write-Host "Errors encountered: $errorCount" -ForegroundColor $(if ($errorCount -gt 0) { "Red" } else { "Green" })
Write-Host "Time taken: $($duration.ToString('mm\:ss'))" -ForegroundColor Gray

if ($resetCount -gt 0) {
    Write-Host "`nüéâ Permission reset completed successfully!" -ForegroundColor Green
} elseif ($errorCount -gt 0) {
    Write-Host "`n‚ö†Ô∏è  Some errors occurred. Check the output above for details." -ForegroundColor Yellow
}

# Disconnect
Disconnect-PnPOnline
Write-Host "`nDisconnected from SharePoint." -ForegroundColor Gray
