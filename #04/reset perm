# SharePoint Library Group Inheritance Script
# Ensures ALL folders and files inherit from library's 4 groups

# Configuration
$siteUrl = "https://yourtenant.sharepoint.com/sites/yoursite"
$libraryName = "Documents"

# Connect to SharePoint Online
try {
    Connect-PnPOnline -Url $siteUrl -Interactive
    Write-Host "‚úì Connected to SharePoint site: $siteUrl" -ForegroundColor Green
} catch {
    Write-Error "Failed to connect to SharePoint: $_"
    exit 1
}

Write-Host "`n=== Library Group Inheritance Check ===" -ForegroundColor Cyan

# First, show the library's current group permissions
Write-Host "Checking library-level permissions..." -ForegroundColor Yellow
try {
    $libraryPermissions = Get-PnPListPermission -Identity $libraryName
    
    Write-Host "`nLibrary '$libraryName' has these groups/permissions:" -ForegroundColor Green
    $groupCount = 0
    foreach ($perm in $libraryPermissions) {
        $principalType = switch ($perm.Member.PrincipalType) {
            "User" { "üë§ User" }
            "SecurityGroup" { "üîí Security Group" }
            "SharePointGroup" { "üè¢ SharePoint Group" }
            "DistributionList" { "üìß Distribution List" }
            default { "‚ùì $($perm.Member.PrincipalType)" }
        }
        
        $roles = ($perm.RoleDefinitionBindings | ForEach-Object { $_.Name }) -join ", "
        Write-Host "  $principalType`: $($perm.Member.Title) - $roles" -ForegroundColor Cyan
        
        if ($perm.Member.PrincipalType -in @("SecurityGroup", "SharePointGroup", "DistributionList")) {
            $groupCount++
        }
    }
    
    Write-Host "`nFound $groupCount group(s) at library level" -ForegroundColor Yellow
    
    if ($groupCount -ne 4) {
        Write-Host "‚ö†Ô∏è  You mentioned 4 groups, but found $groupCount. Continuing anyway..." -ForegroundColor Yellow
    }
    
} catch {
    Write-Warning "Could not retrieve library permissions: $($_.Exception.Message)"
}

# Get all items from library
Write-Host "`nScanning all folders and files..." -ForegroundColor Yellow

try {
    $allItems = Get-PnPListItem -List $libraryName -PageSize 1000 -Fields "Id", "FileRef", "FileSystemObjectType", "HasUniqueRoleAssignments"
    
    Write-Host "Found $($allItems.Count) total items" -ForegroundColor Cyan
    
    # Filter items that have unique permissions (not inheriting from library)
    $itemsNotInheriting = $allItems | Where-Object { 
        $_.FieldValues["HasUniqueRoleAssignments"] -eq $true 
    }
    
    if ($itemsNotInheriting.Count -eq 0) {
        Write-Host "‚úÖ All items are already inheriting from library groups!" -ForegroundColor Green
        Write-Host "No changes needed." -ForegroundColor Green
        Disconnect-PnPOnline
        exit 0
    }
    
    Write-Host "Found $($itemsNotInheriting.Count) items NOT inheriting from library groups" -ForegroundColor Red
    Write-Host "These will be fixed to use your 4 library groups..." -ForegroundColor Yellow
    
    # Ask for confirmation
    $confirm = Read-Host "`nProceed to reset permissions on $($itemsNotInheriting.Count) items? (y/N)"
    if ($confirm -ne "y" -and $confirm -ne "Y") {
        Write-Host "Operation cancelled." -ForegroundColor Yellow
        Disconnect-PnPOnline
        exit 0
    }
    
    # Sort items: Folders first to avoid inheritance conflicts
    $sortedItems = $itemsNotInheriting | Sort-Object { $_.FieldValues["FileSystemObjectType"] } -Descending
    
    # Process items
    $fixedCount = 0
    $errorCount = 0
    
    foreach ($item in $sortedItems) {
        $itemType = if ($item.FieldValues["FileSystemObjectType"] -eq 0) { "File" } else { "Folder" }
        $itemPath = $item.FieldValues["FileRef"]
        
        Write-Host "[$($fixedCount + $errorCount + 1)/$($sortedItems.Count)] Fixing $itemType`: " -NoNewline -ForegroundColor Gray
        Write-Host "$itemPath" -ForegroundColor White
        
        try {
            # Reset to inherit from library (which has your 4 groups)
            Set-PnPListItemPermission -List $libraryName -Identity $item.Id -InheritPermissions
            
            $fixedCount++
            Write-Host "  ‚úÖ Now inherits library groups" -ForegroundColor Green
            
        } catch {
            $errorCount++
            Write-Host "  ‚ùå Failed: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        # Throttling protection
        if (($fixedCount + $errorCount) % 25 -eq 0) {
            Start-Sleep -Milliseconds 200
        }
    }
    
} catch {
    Write-Error "Failed to process items: $_"
    Disconnect-PnPOnline
    exit 1
}

# Final verification
Write-Host "`n=== Verification ===" -ForegroundColor Cyan
Write-Host "Checking if all items now inherit from library..." -ForegroundColor Yellow

try {
    $allItemsAfter = Get-PnPListItem -List $libraryName -PageSize 1000 -Fields "HasUniqueRoleAssignments"
    $stillUnique = $allItemsAfter | Where-Object { $_.FieldValues["HasUniqueRoleAssignments"] -eq $true }
    
    if ($stillUnique.Count -eq 0) {
        Write-Host "‚úÖ SUCCESS: All items now inherit from library groups!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  $($stillUnique.Count) items still have unique permissions" -ForegroundColor Yellow
    }
} catch {
    Write-Warning "Could not verify final state: $($_.Exception.Message)"
}

# Summary
Write-Host "`n" + "="*60 -ForegroundColor Cyan
Write-Host "LIBRARY GROUP INHERITANCE SUMMARY" -ForegroundColor Cyan
Write-Host "="*60 -ForegroundColor Cyan
Write-Host "Items successfully fixed: $fixedCount" -ForegroundColor Green
if ($errorCount -gt 0) {
    Write-Host "Items with errors: $errorCount" -ForegroundColor Red
}

if ($fixedCount -gt 0) {
    Write-Host "`nüéâ All folders and files now use your library's 4 groups!" -ForegroundColor Green
    Write-Host "‚úÖ Consistent permissions across the entire library" -ForegroundColor Green
} else {
    Write-Host "`n‚úÖ Library was already properly configured" -ForegroundColor Green
}

# Disconnect
Disconnect-PnPOnline
Write-Host "`nDisconnected from SharePoint." -ForegroundColor Gray
