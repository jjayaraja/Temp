Write-Host "`n=== SharePoint Permission Reset Started ===" -ForegroundColor Cyan
$startTime = Get-Date

# Method: Get ALL items first, then filter in PowerShell
# This avoids CAML field type issues
Write-Host "Retrieving all items from library..." -ForegroundColor Yellow

try {
    # Get all items without complex CAML filtering
    $allItems = Get-PnPListItem -List $libraryName -PageSize 2000 -Fields "Id", "FileRef", "FileSystemObjectType", "HasUniqueRoleAssignments"
    
    Write-Host "Retrieved $($allItems.Count) total items" -ForegroundColor Cyan
    
    # Filter items with unique permissions in PowerShell
    Write-Host "Filtering items with unique permissions..." -ForegroundColor Yellow
    
    $itemsToReset = $allItems | Where-Object { 
        $_.FieldValues["HasUniqueRoleAssignments"] -eq $true 
    }
    
    if ($itemsToReset.Count -eq 0) {
        Write-Host "No items with unique permissions found." -ForegroundColor Yellow
        Disconnect-PnPOnline
        exit 0
    }
    
    Write-Host "Found $($itemsToReset.Count) items with unique permissions" -ForegroundColor Cyan
    
    # Sort items: Folders first (FileSystemObjectType = 1), then Files (FileSystemObjectType = 0)
    $sortedItems = $itemsToReset | Sort-Object { $_.FieldValues["FileSystemObjectType"] } -Descending
    
    # Process items
    $resetCount = 0
    $errorCount = 0
    
    foreach ($item in $sortedItems) {
        $itemType = if ($item.FieldValues["FileSystemObjectType"] -eq 0) { "File" } else { "Folder" }
        $itemPath = $item.FieldValues["FileRef"]
        
        try {
            Write-Host "[$($resetCount + $errorCount + 1)/$($sortedItems.Count)] Resetting $itemType`: " -NoNewline -ForegroundColor Gray
            Write-Host "$itemPath" -ForegroundColor White
            
            # Reset permissions to inherit from parent
            Set-PnPListItemPermission -List $libraryName -Identity $item.Id -InheritPermissions
            
            $resetCount++
            Write-Host "  ‚úì Success" -ForegroundColor Green
            
        } catch {
            $errorCount++
            Write-Host "  ‚úó Failed: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        # Small delay every 25 items to avoid throttling
        if (($resetCount + $errorCount) % 25 -eq 0) {
            Write-Host "  Pausing briefly to avoid throttling..." -ForegroundColor Gray
            Start-Sleep -Milliseconds 200
        }
    }
    
} catch {
    Write-Error "Failed to retrieve items: $_"
    
    # Alternative method using basic query
    Write-Host "`nTrying alternative method..." -ForegroundColor Yellow
    
    try {
        # Very basic approach - get items in smaller batches
        $batchSize = 500
        $allItems = @()
        $position = 0
        
        do {
            Write-Host "Retrieving batch starting at position $position..." -ForegroundColor Gray
            
            $batch = Get-PnPListItem -List $libraryName -PageSize $batchSize
            $allItems += $batch
            $position += $batch.Count
            
        } while ($batch.Count -eq $batchSize)
        
        Write-Host "Retrieved $($allItems.Count) items using alternative method" -ForegroundColor Cyan
        
        # Filter and process items
        $itemsToReset = $allItems | Where-Object { $_.HasUniqueRoleAssignments -eq $true }
        
        if ($itemsToReset.Count -gt 0) {
            Write-Host "Found $($itemsToReset.Count) items to reset" -ForegroundColor Cyan
            
            $resetCount = 0
            foreach ($item in $itemsToReset) {
                try {
                    $itemPath = if ($item.FieldValues["FileRef"]) { $item.FieldValues["FileRef"] } else { "Unknown path" }
                    Write-Host "Resetting: $itemPath" -ForegroundColor White
                    
                    Set-PnPListItemPermission -List $libraryName -Identity $item.Id -InheritPermissions
                    $resetCount++
                    Write-Host "  ‚úì Success" -ForegroundColor Green
                    
                } catch {
                    Write-Warning "Failed to reset item ID $($item.Id): $($_.Exception.Message)"
                }
            }
        } else {
            Write-Host "No items with unique permissions found." -ForegroundColor Yellow
        }
        
    } catch {
        Write-Error "Alternative method also failed: $_"
        Disconnect-PnPOnline
        exit 1
    }
}

# Summary
$endTime = Get-Date
$duration = $endTime - $startTime

Write-Host "`n=== Reset Complete ===" -ForegroundColor Cyan
Write-Host "Successfully reset: $resetCount items" -ForegroundColor Green
if ($errorCount -gt 0) {
    Write-Host "Errors encountered: $errorCount" -ForegroundColor Red
}
Write-Host "Time taken: $($duration.ToString('mm\:ss'))" -ForegroundColor Gray

if ($resetCount -gt 0) {
    Write-Host "`nüéâ Permission reset completed!" -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è  No permissions were reset." -ForegroundColor Yellow
}

# Disconnect
Disconnect-PnPOnline
Write-Host "`nDisconnected from SharePoint." -ForegroundColor Gray
