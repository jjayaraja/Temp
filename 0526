# SharePoint Document Library Permission Reset Script
# Resets all custom permissions to inherit from parent library

# Configuration
$SiteUrl = "https://yourtenant.sharepoint.com/sites/yoursite"
$LibraryName = "YourDocumentLibrary"
$BatchSize = 100  # Process items in batches for better performance

# Connect to SharePoint
Write-Host "Connecting to SharePoint..." -ForegroundColor Yellow
Connect-PnPOnline -Url $SiteUrl -Interactive

try {
    # Get the document library
    Write-Host "Getting document library: $LibraryName" -ForegroundColor Yellow
    $Library = Get-PnPList -Identity $LibraryName
    
    if (!$Library) {
        throw "Library '$LibraryName' not found!"
    }

    # Get all items using proper pagination
    Write-Host "Retrieving all items..." -ForegroundColor Yellow
    
    $ItemsProcessed = 0
    $TotalResetCount = 0
    $UniquePermissionItems = @()
    $ResetItems = @()
    $TotalFolders = 0
    $TotalFiles = 0
    
    # Get all items in batches using Get-PnPListItem with -PageSize
    $AllItems = @()
    $PageSize = $BatchSize
    $StartIndex = 0
    
    do {
        Write-Host "Fetching items $StartIndex to $($StartIndex + $PageSize - 1)..." -ForegroundColor Cyan
        
        # Use CAML query with proper paging
        $CAMLQuery = @"
<View Scope='RecursiveAll'>
    <Query>
        <OrderBy>
            <FieldRef Name='ID'/>
        </OrderBy>
    </Query>
    <RowLimit>$PageSize</RowLimit>
</View>
"@
        
        try {
            $BatchItems = Get-PnPListItem -List $Library -Query $CAMLQuery -PageSize $PageSize
            
            if ($BatchItems -and $BatchItems.Count -gt 0) {
                $AllItems += $BatchItems
                $StartIndex += $BatchItems.Count
                Write-Host "Retrieved $($BatchItems.Count) items. Total so far: $($AllItems.Count)" -ForegroundColor Green
            } else {
                break
            }
        }
        catch {
            Write-Host "Trying alternative method..." -ForegroundColor Yellow
            # Alternative: Get all items at once (for smaller libraries or when pagination fails)
            $AllItems = Get-PnPListItem -List $Library -PageSize 5000
            break
        }
        
    } while ($BatchItems.Count -eq $PageSize)
    
    Write-Host "Total items retrieved: $($AllItems.Count)" -ForegroundColor Magenta
    
    # Process all items
    foreach ($Item in $AllItems) {
            try {
                # Count folders and files
                $IsFolder = $Item["FSObjType"] -eq 1
                if ($IsFolder) {
                    $TotalFolders++
                } else {
                    $TotalFiles++
                }
                
                # Use PnP PowerShell method to check permissions
                $HasUniquePerms = Get-PnPProperty -ClientObject $Item -Property "HasUniqueRoleAssignments" -ErrorAction SilentlyContinue
                
                if ($HasUniquePerms -eq $true) {
                    # Add to unique permissions list
                    $UniquePermissionItems += [PSCustomObject]@{
                        ID = $Item.Id
                        Title = $Item["Title"]
                        FileLeafRef = $Item["FileLeafRef"]
                        FileSystemObjectType = if($IsFolder) { "Folder" } else { "File" }
                        ServerRelativeUrl = $Item["FileRef"]
                    }
                    
                    # Reset to inherit permissions using PnP method
                    Set-PnPListItemPermission -List $Library -Identity $Item.Id -InheritPermissions
                    
                    # Add to reset items list
                    $ResetItems += [PSCustomObject]@{
                        ID = $Item.Id
                        Title = $Item["Title"]
                        FileLeafRef = $Item["FileLeafRef"]
                        FileSystemObjectType = if($IsFolder) { "Folder" } else { "File" }
                        ServerRelativeUrl = $Item["FileRef"]
                    }
                    
                    $TotalResetCount++
                }
                
                $ItemsProcessed++
            }
            catch {
                Write-Warning "Failed to process item ID $($Item.Id): $($_.Exception.Message)"
                $ItemsProcessed++
            }
        }
        
        # Show progress every 1000 items
        if ($ItemsProcessed % 1000 -eq 0) {
            Write-Host "Processed $ItemsProcessed items so far..." -ForegroundColor Yellow
        }
    }
    
    Write-Host "`n=== DOCUMENT LIBRARY SUMMARY ===" -ForegroundColor Magenta
    Write-Host "Total Items Processed: $ItemsProcessed" -ForegroundColor White
    Write-Host "Total Folders: $TotalFolders" -ForegroundColor White
    Write-Host "Total Files: $TotalFiles" -ForegroundColor White
    Write-Host "Items with Unique Permissions: $($UniquePermissionItems.Count)" -ForegroundColor White
    Write-Host "Items Reset to Inherit: $TotalResetCount" -ForegroundColor White
    
    Write-Host "`nCompleted! Processed $ItemsProcessed total items." -ForegroundColor Green
    Write-Host "Reset permissions for $TotalResetCount items with unique permissions." -ForegroundColor Green
    
    # Display items that had unique permissions
    Write-Host "`n=== ITEMS WITH UNIQUE PERMISSIONS ($($UniquePermissionItems.Count)) ===" -ForegroundColor Yellow
    $UniquePermissionItems | Format-Table -Property ID, Title, FileSystemObjectType, FileLeafRef, ServerRelativeUrl -AutoSize
    
    # Display items that were reset to inherit
    Write-Host "`n=== ITEMS RESET TO INHERIT PERMISSIONS ($($ResetItems.Count)) ===" -ForegroundColor Green
    $ResetItems | Format-Table -Property ID, Title, FileSystemObjectType, FileLeafRef, ServerRelativeUrl -AutoSize
    Write-Host "All items now inherit permissions from the document library." -ForegroundColor Green
}
catch {
    Write-Error "Script failed: $($_.Exception.Message)"
}
finally {
    # Disconnect
    Disconnect-PnPOnline
    Write-Host "Disconnected from SharePoint." -ForegroundColor Yellow
}

# Alternative faster method for very large libraries (commented out)
<#
# Ultra-fast method using REST API batch requests (uncomment if needed)
function Reset-PermissionsBatch {
    param($SiteUrl, $LibraryName)
    
    Connect-PnPOnline -Url $SiteUrl -Interactive
    
    # Get all items with REST API
    $RestQuery = "_api/web/lists/getbytitle('$LibraryName')/items?`$select=Id,HasUniqueRoleAssignments&`$filter=HasUniqueRoleAssignments eq true&`$top=5000"
    
    do {
        $Items = Invoke-PnPSPRestMethod -Url $RestQuery -Method Get
        
        if ($Items.value.Count -gt 0) {
            # Create batch request
            $Batch = New-PnPBatch
            
            foreach ($Item in $Items.value) {
                $ResetUrl = "_api/web/lists/getbytitle('$LibraryName')/items($($Item.Id))/resetroleinheritance"
                Invoke-PnPSPRestMethod -Url $ResetUrl -Method Post -Batch $Batch
            }
            
            # Execute batch
            Invoke-PnPBatch -Batch $Batch
            Write-Host "Reset $($Items.value.Count) items in batch"
        }
        
        # Get next batch if available
        $RestQuery = $Items.'odata.nextLink'
        
    } while ($RestQuery)
    
    Disconnect-PnPOnline
}

# Uncomment to use the ultra-fast batch method:
# Reset-PermissionsBatch -SiteUrl $SiteUrl -LibraryName $LibraryName
#>
