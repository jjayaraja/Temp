1. Export Navigation to CSV
powershell
# Export Navigation Nodes to CSV
Connect-PnPOnline -Url "https://contoso.sharepoint.com/sites/sourcehub" -Interactive

$TopNavNodes = Get-PnPNavigationNode -Location TopNavigationBar
$QuickLaunchNodes = Get-PnPNavigationNode -Location QuickLaunch

function Process-Nodes {
    param(
        [Microsoft.SharePoint.Client.NavigationNode]$Node,
        [string]$NavigationType,
        [int]$ParentNodeId
    )
    
    $NodeData = [PSCustomObject]@{
        Title            = $Node.Title
        Url              = $Node.Url
        IsExternal       = $Node.IsExternal
        NavigationType   = $NavigationType
        ParentNodeId     = $ParentNodeId
        SourceNodeId     = $Node.Id
    }
    $Script:NavigationData += $NodeData

    foreach ($Child in $Node.Children) {
        Process-Nodes -Node $Child -NavigationType $NavigationType -ParentNodeId $Node.Id
    }
}

# Process nodes
foreach ($Node in $TopNavNodes) { Process-Nodes $Node "TopNavigationBar" $null }
foreach ($Node in $QuickLaunchNodes) { Process-Nodes $Node "QuickLaunch" $null }

$NavigationData | Export-Csv -Path "NavigationExport.csv" -NoTypeInformation
Write-Host "Exported navigation with ParentNodeId and SourceNodeId!"






  
2. Import Navigation from CSV
powershell
# Import Navigation Nodes from CSV
Connect-PnPOnline -Url "https://contoso.sharepoint.com/sites/targethub" -Interactive

$ImportedNav = Import-Csv -Path "NavigationExport.csv"

# Import nodes in correct order (parents first)
foreach ($NavNode in $ImportedNav) {
    $ParentNode = $null
    
    # Find parent node if specified
    if (-not [string]::IsNullOrEmpty($NavNode.ParentNodeTitle)) {
        $ParentNode = Get-PnPNavigationNode -Location $NavNode.NavigationType | Where-Object { $_.Title -eq $NavNode.ParentNodeTitle }
        if (-not $ParentNode) {
            Write-Warning "Parent node '$($NavNode.ParentNodeTitle)' not found. Skipping child node '$($NavNode.Title)'."
            continue
        }
    }

    # Create new navigation node
    $NewNodeParams = @{
        Location  = $NavNode.NavigationType
        Title     = $NavNode.Title
        Url       = $NavNode.Url
        IsExternal= [System.Convert]::ToBoolean($NavNode.IsExternal)
    }

    if ($ParentNode) {
        $NewNodeParams.Add("Parent", $ParentNode.Id)
    }

    Add-PnPNavigationNode @NewNodeParams -ErrorAction Stop
    Write-Host "Imported node: $($NavNode.Title)"
}

Write-Host "Navigation import completed!"



  <#
Steps to Use:
Export Navigation:

Run the first script after replacing the source hub URL.

Authenticate interactively.

A NavigationExport.csv file will be generated.

Import Navigation:

Run the second script after replacing the target hub URL.

Ensure the CSV file is in the same directory.

The script recreates the navigation structure with parent-child relationships.

Notes:
Order Matters: The CSV must list parent nodes before their children.

URL Adjustments: Update URLs in the CSV if the target site has a different base URL.

Permissions: Requires Site Owner permissions on both sites.

PnP Modules: Install with Install-Module -Name PnP.PowerShell. #>
